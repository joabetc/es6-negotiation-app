{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_http","get","then","console","log","negociacoes","map","Negociacao","Date","obj","data","quantidade","valor","catch","err","Error","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","negociacao","getConnection","connection","dao","add","error","conneciton","listAll","deleteAll","currentList","obterNegociacoes","filter","some","isEquals","negociacaoExitente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import { HttpService } from './HttpService';\r\nimport { ConnectionFactory } from './ConnectionFactory';\r\nimport { NegociacaoDao } from '../dao/NegociacaoDao';\r\n\r\nexport class NegociacaoService {\r\n\r\n  constructor() {\r\n    this._http = new HttpService();\r\n  }\r\n\r\n  obterNegociacoesDaSemana() {\r\n\r\n    return this._http\r\n      .get('negociacoes/semana')\r\n      .then(negociacoes => {\r\n        console.log(negociacoes);\r\n        return negociacoes.map(obj => new Negociacao(new Date(obj.data), obj.quantidade, obj.valor))\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        throw new Error('Não foi possível obter as negociações da semana.');\r\n      });\r\n  }\r\n\r\n  obterNegociacoesDaSemanaAnterior() {\r\n\r\n    return this._http\r\n      .get('negociacoes/anterior')\r\n      .then(negociacoes => {\r\n        console.log(negociacoes);\r\n        return negociacoes.map(obj => new Negociacao(new Date(obj.data), obj.quantidade, obj.valor));\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        throw new Error('Não foi possível obter as negociações da semana anterior.');\r\n      });\r\n  }\r\n\r\n  obterNegociacoesDaSemanaRetrasada() {\r\n\r\n    return this._http\r\n      .get('negociacoes/retrasada')\r\n      .then(negociacoes => {\r\n        console.log(negociacoes);\r\n        return negociacoes.map(obj => new Negociacao(new Date(obj.data), obj.quantidade, obj.valor));\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        throw new Error('Não foi possível obter as negociações da semana retrasada.');\r\n      });\r\n  }\r\n\r\n  obterNegociacoes() {\r\n    return Promise.all([\r\n      this.obterNegociacoesDaSemana(),\r\n      this.obterNegociacoesDaSemanaAnterior(),\r\n      this.obterNegociacoesDaSemanaRetrasada()\r\n    ]).then(periodos => {\r\n      let negociacoes = periodos.reduce(\r\n        (dados, periodo) => dados.concat(periodo), []);\r\n        return negociacoes;\r\n    }).catch(err => {\r\n      throw new Error(err);\r\n    });\r\n  }\r\n\r\n  add(negociacao) {\r\n    return ConnectionFactory\r\n    .getConnection()\r\n    .then(connection => new NegociacaoDao(connection))\r\n    .then(dao => dao.add(negociacao))\r\n    .then(() => 'Negociação adicionada com sucesso')\r\n    .catch(error => {\r\n      console.log(error);\r\n      throw new Error('Não foi possível adicionar a negociação');\r\n    });\r\n  }\r\n\r\n  list() {\r\n    return ConnectionFactory\r\n      .getConnection()\r\n      .then(conneciton => new NegociacaoDao(conneciton))\r\n      .then(dao => dao.listAll())\r\n      .catch(error => {\r\n        console.log(error);\r\n        throw new Error('Não foi possível obter as negociações');\r\n      })\r\n  }\r\n\r\n  delete() {\r\n    return ConnectionFactory\r\n    .getConnection()\r\n    .then(connection => new NegociacaoDao(connection))\r\n    .then(dao => dao.deleteAll())\r\n    .then(() => 'Negociações apagadas com sucesso')\r\n    .catch(error => {\r\n      console.log(error);\r\n      throw new Error('Não foi possível apagar as negociações');\r\n    });\r\n  }\r\n\r\n  import(currentList) {\r\n    return this.obterNegociacoes()\r\n    .then(negociacoes => \r\n      negociacoes.filter(negociacao => \r\n        !currentList.some(negociacaoExitente => \r\n          negociacao.isEquals(negociacaoExitente)))\r\n    )\r\n    .catch(error => {\r\n      console.log(error);\r\n      throw new Error('Não foi possível buscar negociações para importar');\r\n    });\r\n  }\r\n\r\n}"]}