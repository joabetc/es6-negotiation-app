{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;AAAA,IAAMA,SAAS,CAAC,aAAD,CAAf;AACA,IAAMC,UAAU,CAAhB;AACA,IAAMC,SAAS,YAAf;;AAEA,IAAIC,aAAa,IAAjB;AACA,IAAIC,QAAQ,IAAZ;;IAEaC,iB,WAAAA,iB;AAEX,+BAAc;AAAA;;AACZ,UAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACD;;;;oCAEsB;AACrB,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,oBAAYI,eAAZ,GAA8B,aAAK;AACjCT,4BAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACD,SAFD;;AAIAR,oBAAYS,SAAZ,GAAwB,aAAK;AAC3B,cAAI,CAAChB,UAAL,EAAiB;AACfA,yBAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,oBAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,uBAAWC,KAAX,GAAmB,YAAW;AAC5B,oBAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN;AACD,aAFD;AAGD;AACDE,kBAAQL,UAAR;AACD,SATD;;AAWAO,oBAAYW,OAAZ,GAAsB,aAAK;AACzBC,kBAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,iBAAOO,EAAEC,MAAF,CAASQ,IAAhB;AACD,SAHD;AAID,OAtBM,CAAP;AAuBD;;;kCAEoBtB,U,EAAY;AAC/BH,aAAO0B,OAAP,CAAe,iBAAS;AACtB,YAAIvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EACE1B,WAAW2B,iBAAX,CAA6BD,KAA7B;;AAEF1B,mBAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACD,OALD;AAMD;;;sCAEwB;AACvB,UAAI7B,UAAJ,EAAgB;AACdC;AACA;AACAD,qBAAa,IAAb;AACD;AACF","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacoes'];\nconst version = 2;\nconst dbName = 'negociacao';\n\nlet connection = null;\nlet close = null;\n\nexport class ConnectionFactory {\n  \n  constructor() {\n    throw new Error('Não é possível criar instâncias de ConnectionFactory');\n  }\n\n  static getConnection() {\n    return new Promise((resolve, reject) => {\n      let openRequest = window.indexedDB.open(dbName, version);\n\n      openRequest.onupgradeneeded = e => {\n        ConnectionFactory._createStores(e.target.result);\n      };\n      \n      openRequest.onsuccess = e => {\n        if (!connection) {\n          connection = e.target.result;\n          close - connection.close.bind(connection);\n          connection.close = function() {\n            throw new Error('Você não pode fechar diretamente a conexão');\n          };\n        }\n        resolve(connection);\n      };\n      \n      openRequest.onerror = e => {\n        console.log(e.target.error);\n        reject(e.target.name);\n      };\n    });\n  }\n  \n  static _createStores(connection) {\n    stores.forEach(store => {\n      if (connection.objectStoreNames.contains(store)) \n        connection.deleteObjectStore(store);\n      \n      connection.createObjectStore(store, { autoIncrement: true });\n    });\n  }\n\n  static closeConnection() {\n    if (connection) {\n      close();\n      //or Reflect.apply(close, connection, []);\n      connection = null;\n    }\n  }\n  \n}"]}