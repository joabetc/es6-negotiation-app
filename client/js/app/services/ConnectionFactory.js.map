{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,YAAW;;AAElC,MAAMC,SAAS,CAAC,aAAD,CAAf;AACA,MAAMC,UAAU,CAAhB;AACA,MAAMC,SAAS,YAAf;;AAEA,MAAIC,aAAa,IAAjB;AACA,MAAIC,QAAQ,IAAZ;;AAEA;AAEE,iCAAc;AAAA;;AACZ,YAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACD;;AAJH;AAAA;AAAA,sCAMyB;AACrB,eAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,cAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAQ,sBAAYI,eAAZ,GAA8B,aAAK;AACjCd,8BAAkBe,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACD,WAFD;;AAIAR,sBAAYS,SAAZ,GAAwB,aAAK;AAC3B,gBAAI,CAACf,UAAL,EAAiB;AACfA,2BAAaY,EAAEC,MAAF,CAASC,MAAtB;AACAb,sBAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,yBAAWC,KAAX,GAAmB,YAAW;AAC5B,sBAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACD,eAFD;AAGD;AACDE,oBAAQJ,UAAR;AACD,WATD;;AAWAM,sBAAYW,OAAZ,GAAsB,aAAK;AACzBC,oBAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,mBAAOO,EAAEC,MAAF,CAASQ,IAAhB;AACD,WAHD;AAID,SAtBM,CAAP;AAuBD;AA9BH;AAAA;AAAA,oCAgCuBrB,UAhCvB,EAgCmC;AAC/BH,eAAOyB,OAAP,CAAe,iBAAS;AACtB,cAAItB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EACEzB,WAAW0B,iBAAX,CAA6BD,KAA7B;;AAEFzB,qBAAW2B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACD,SALD;AAMD;AAvCH;AAAA;AAAA,wCAyC2B;AACvB,YAAI5B,UAAJ,EAAgB;AACdC;AACA;AACAD,uBAAa,IAAb;AACD;AACF;AA/CH;;AAAA;AAAA;AAkDD,CA3DuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["var ConnectionFactory = (function() {\n\n  const stores = ['negociacoes'];\n  const version = 2;\n  const dbName = 'negociacao';\n  \n  var connection = null;\n  var close = null;\n  \n  return class ConnectionFactory {\n    \n    constructor() {\n      throw new Error('Não é possível criar instâncias de ConnectionFactory');\n    }\n  \n    static getConnection() {\n      return new Promise((resolve, reject) => {\n        let openRequest = window.indexedDB.open(dbName, version);\n  \n        openRequest.onupgradeneeded = e => {\n          ConnectionFactory._createStores(e.target.result);\n        };\n        \n        openRequest.onsuccess = e => {\n          if (!connection) {\n            connection = e.target.result;\n            close - connection.close.bind(connection);\n            connection.close = function() {\n              throw new Error('Você não pode fechar diretamente a conexão');\n            };\n          }\n          resolve(connection);\n        };\n        \n        openRequest.onerror = e => {\n          console.log(e.target.error);\n          reject(e.target.name);\n        };\n      });\n    }\n    \n    static _createStores(connection) {\n      stores.forEach(store => {\n        if (connection.objectStoreNames.contains(store)) \n          connection.deleteObjectStore(store);\n        \n        connection.createObjectStore(store, { autoIncrement: true });\n      });\n    }\n\n    static closeConnection() {\n      if (connection) {\n        close();\n        //or Reflect.apply(close, connection, []);\n        connection = null;\n      }\n    }\n    \n  }\n})();"]}